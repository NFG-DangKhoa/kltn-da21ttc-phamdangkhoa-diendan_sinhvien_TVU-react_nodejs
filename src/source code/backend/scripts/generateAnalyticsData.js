// File: backend/scripts/generateAnalyticsData.js
const mongoose = require('mongoose');
const User = require('../models/User');
const Post = require('../models/Post');
const Topic = require('../models/Topic');
const Comment = require('../models/Comment');
const Like = require('../models/Like');
const UserActivity = require('../models/UserActivity');

// Connect to MongoDB
require('dotenv').config();
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Sample data arrays
const sampleUsers = [
    { fullName: 'Nguy·ªÖn VƒÉn An', email: 'an.nguyen@tvu.edu.vn', role: 'user' },
    { fullName: 'Tr·∫ßn Th·ªã B√¨nh', email: 'binh.tran@tvu.edu.vn', role: 'user' },
    { fullName: 'L√™ VƒÉn C∆∞·ªùng', email: 'cuong.le@tvu.edu.vn', role: 'user' },
    { fullName: 'Ph·∫°m Th·ªã Dung', email: 'dung.pham@tvu.edu.vn', role: 'user' },
    { fullName: 'Ho√†ng VƒÉn Em', email: 'em.hoang@tvu.edu.vn', role: 'user' },
    { fullName: 'V√µ Th·ªã Ph∆∞∆°ng', email: 'phuong.vo@tvu.edu.vn', role: 'user' },
    { fullName: 'ƒê·∫∑ng VƒÉn Giang', email: 'giang.dang@tvu.edu.vn', role: 'user' },
    { fullName: 'B√πi Th·ªã Hoa', email: 'hoa.bui@tvu.edu.vn', role: 'user' },
    { fullName: 'L√Ω VƒÉn Inh', email: 'inh.ly@tvu.edu.vn', role: 'user' },
    { fullName: 'Ng√¥ Th·ªã Kim', email: 'kim.ngo@tvu.edu.vn', role: 'user' },
    { fullName: 'Phan VƒÉn Long', email: 'long.phan@tvu.edu.vn', role: 'user' },
    { fullName: 'T√¥n Th·ªã Mai', email: 'mai.ton@tvu.edu.vn', role: 'user' },
    { fullName: 'Hu·ª≥nh VƒÉn Nam', email: 'nam.huynh@tvu.edu.vn', role: 'user' },
    { fullName: 'Cao Th·ªã Oanh', email: 'oanh.cao@tvu.edu.vn', role: 'user' },
    { fullName: 'ƒêinh VƒÉn Ph√∫c', email: 'phuc.dinh@tvu.edu.vn', role: 'user' }
];

const sampleTopics = [
    { name: 'H·ªçc l·∫≠p tr√¨nh', description: 'Th·∫£o lu·∫≠n v·ªÅ l·∫≠p tr√¨nh v√† c√¥ng ngh·ªá', category: 'H·ªçc t·∫≠p', color: '#2196F3' },
    { name: 'Th·ª±c t·∫≠p sinh', description: 'Chia s·∫ª kinh nghi·ªám th·ª±c t·∫≠p', category: 'Th·ª±c t·∫≠p', color: '#4CAF50' },
    { name: 'T√¨m vi·ªác l√†m', description: 'Th√¥ng tin tuy·ªÉn d·ª•ng v√† CV', category: 'Vi·ªác l√†m', color: '#FF9800' },
    { name: 'Nghi√™n c·ª©u khoa h·ªçc', description: 'C√°c ƒë·ªÅ t√†i nghi√™n c·ª©u', category: 'Nghi√™n c·ª©u', color: '#9C27B0' },
    { name: 'Chia s·∫ª kinh nghi·ªám', description: 'Kinh nghi·ªám h·ªçc t·∫≠p v√† l√†m vi·ªác', category: 'K·ªπ nƒÉng m·ªÅm', color: '#F44336' },
    { name: 'S·ª± ki·ªán tr∆∞·ªùng', description: 'C√°c ho·∫°t ƒë·ªông v√† s·ª± ki·ªán', category: 'Ho·∫°t ƒë·ªông sinh vi√™n', color: '#00BCD4' },
    { name: 'H·ªèi ƒë√°p h·ªçc t·∫≠p', description: 'Gi·∫£i ƒë√°p th·∫Øc m·∫Øc h·ªçc t·∫≠p', category: 'Trao ƒë·ªïi h·ªçc thu·∫≠t', color: '#795548' },
    { name: 'C√¥ng ngh·ªá m·ªõi', description: 'Xu h∆∞·ªõng c√¥ng ngh·ªá m·ªõi', category: 'C√¥ng ngh·ªá', color: '#607D8B' }
];

const samplePosts = [
    { title: 'H∆∞·ªõng d·∫´n h·ªçc React c∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu', content: 'React l√† m·ªôt th∆∞ vi·ªán JavaScript ph·ªï bi·∫øn...', type: 'discussion' },
    { title: 'Kinh nghi·ªám th·ª±c t·∫≠p t·∫°i c√¥ng ty IT 6 th√°ng', content: 'Sau 6 th√°ng th·ª±c t·∫≠p t·∫°i c√¥ng ty...', type: 'discussion' },
    { title: 'C√°ch vi·∫øt CV xin vi·ªác hi·ªáu qu·∫£ cho sinh vi√™n IT', content: 'CV l√† y·∫øu t·ªë quan tr·ªçng...', type: 'discussion' },
    { title: 'T·ªïng h·ª£p t√†i li·ªáu h·ªçc JavaScript t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao', content: 'JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh...', type: 'discussion' },
    { title: 'Chia s·∫ª kinh nghi·ªám ph·ªèng v·∫•n v√†o c√°c c√¥ng ty l·ªõn', content: 'Qu√° tr√¨nh ph·ªèng v·∫•n th∆∞·ªùng g·ªìm...', type: 'discussion' },
    { title: 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Git v√† GitHub cho ng∆∞·ªùi m·ªõi', content: 'Git l√† h·ªá th·ªëng qu·∫£n l√Ω phi√™n b·∫£n...', type: 'discussion' },
    { title: 'L√†m th·∫ø n√†o ƒë·ªÉ h·ªçc Python hi·ªáu qu·∫£?', content: 'Python l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh d·ªÖ h·ªçc...', type: 'question' },
    { title: 'Th√¥ng b√°o tuy·ªÉn d·ª•ng th·ª±c t·∫≠p sinh Frontend', content: 'C√¥ng ty ABC tuy·ªÉn th·ª±c t·∫≠p sinh...', type: 'job' },
    { title: 'Seminar v·ªÅ AI v√† Machine Learning', content: 'Tr∆∞·ªùng t·ªï ch·ª©c seminar v·ªÅ AI...', type: 'event' },
    { title: 'C√°ch t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t website', content: 'Hi·ªáu su·∫•t website l√† y·∫øu t·ªë quan tr·ªçng...', type: 'discussion' },
    { title: 'Kinh nghi·ªám h·ªçc ti·∫øng Anh cho ng√†nh IT', content: 'Ti·∫øng Anh r·∫•t quan tr·ªçng trong IT...', type: 'discussion' },
    { title: 'H∆∞·ªõng d·∫´n deploy ·ª©ng d·ª•ng l√™n Heroku', content: 'Heroku l√† platform cloud ph·ªï bi·∫øn...', type: 'discussion' },
    { title: 'T√¨m hi·ªÉu v·ªÅ Docker v√† containerization', content: 'Docker gi√∫p ƒë√≥ng g√≥i ·ª©ng d·ª•ng...', type: 'discussion' },
    { title: 'L·ªô tr√¨nh h·ªçc Full-stack Developer', content: 'Full-stack developer c·∫ßn bi·∫øt...', type: 'discussion' },
    { title: 'Chia s·∫ª project cu·ªëi kh√≥a hay ho', content: 'D·ª± √°n cu·ªëi kh√≥a c·ªßa t√¥i l√†...', type: 'discussion' }
];

const activityTypes = ['login', 'view_post', 'create_post', 'comment', 'like', 'search', 'view_topic'];

// Helper functions
function getRandomElement(array) {
    return array[Math.floor(Math.random() * array.length)];
}

function getRandomDate(start, end) {
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

function getRandomNumber(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

async function generateData() {
    try {
        console.log('üöÄ Starting data generation...');

        // Clear existing data
        console.log('üßπ Clearing existing data...');
        await User.deleteMany({ email: { $regex: '@tvu.edu.vn' } });
        await Topic.deleteMany({});
        await Post.deleteMany({});
        await Comment.deleteMany({});
        await Like.deleteMany({});
        await UserActivity.deleteMany({});

        // Create users
        console.log('üë• Creating users...');
        const users = [];
        for (const userData of sampleUsers) {
            const user = new User({
                ...userData,
                password: '$2b$10$hashedpassword', // Fake hashed password
                status: 'active',
                isEmailVerified: true,
                lastLogin: getRandomDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), new Date())
            });
            await user.save();
            users.push(user);
        }
        console.log(`‚úÖ Created ${users.length} users`);

        // Create topics
        console.log('üìö Creating topics...');
        const topics = [];
        for (const topicData of sampleTopics) {
            const topic = new Topic({
                ...topicData,
                createdBy: getRandomElement(users)._id,
                postCount: 0,
                viewCount: getRandomNumber(100, 1000)
            });
            await topic.save();
            topics.push(topic);
        }
        console.log(`‚úÖ Created ${topics.length} topics`);

        // Create posts
        console.log('üìù Creating posts...');
        const posts = [];
        for (const postData of samplePosts) {
            const topic = getRandomElement(topics);
            const author = getRandomElement(users);
            const post = new Post({
                ...postData,
                authorId: author._id,
                topicId: topic._id,
                status: 'published',
                views: getRandomNumber(50, 500),
                commentCount: getRandomNumber(0, 20),
                likeCount: getRandomNumber(0, 50),
                createdAt: getRandomDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), new Date())
            });
            await post.save();
            posts.push(post);

            // Update topic post count
            topic.postCount += 1;
            await topic.save();
        }
        console.log(`‚úÖ Created ${posts.length} posts`);

        // Create comments
        console.log('üí¨ Creating comments...');
        const comments = [];
        for (let i = 0; i < 100; i++) {
            const post = getRandomElement(posts);
            const author = getRandomElement(users);
            const comment = new Comment({
                postId: post._id,
                authorId: author._id,
                content: `ƒê√¢y l√† b√¨nh lu·∫≠n s·ªë ${i + 1}. C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª!`,
                likeCount: getRandomNumber(0, 10),
                createdAt: getRandomDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), new Date())
            });
            await comment.save();
            comments.push(comment);
        }
        console.log(`‚úÖ Created ${comments.length} comments`);

        // Create likes
        console.log('‚ù§Ô∏è Creating likes...');
        const likes = [];
        for (let i = 0; i < 200; i++) {
            const user = getRandomElement(users);
            const isPostLike = Math.random() > 0.3;

            if (isPostLike) {
                const post = getRandomElement(posts);
                const like = new Like({
                    userId: user._id,
                    postId: post._id,
                    targetType: 'post',
                    createdAt: getRandomDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), new Date())
                });
                await like.save();
                likes.push(like);
            } else {
                const comment = getRandomElement(comments);
                const like = new Like({
                    userId: user._id,
                    commentId: comment._id,
                    targetType: 'comment',
                    createdAt: getRandomDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), new Date())
                });
                await like.save();
                likes.push(like);
            }
        }
        console.log(`‚úÖ Created ${likes.length} likes`);

        console.log('üìä Generating user activities...');
        const activities = [];

        // Generate activities for the last 30 days
        const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
        const endDate = new Date();

        for (let i = 0; i < 1000; i++) {
            const user = getRandomElement(users);
            const activityType = getRandomElement(activityTypes);
            const timestamp = getRandomDate(startDate, endDate);

            let details = {};

            // Add specific details based on activity type
            switch (activityType) {
                case 'view_post':
                    details = {
                        targetType: 'post',
                        targetId: getRandomElement(posts)._id,
                        duration: getRandomNumber(30, 300) // seconds
                    };
                    break;
                case 'create_post':
                    details = {
                        targetType: 'post',
                        targetId: getRandomElement(posts)._id
                    };
                    break;
                case 'comment':
                    details = {
                        targetType: 'comment',
                        targetId: getRandomElement(comments)._id,
                        postId: getRandomElement(posts)._id
                    };
                    break;
                case 'like':
                    details = {
                        targetType: Math.random() > 0.5 ? 'post' : 'comment',
                        targetId: Math.random() > 0.5 ? getRandomElement(posts)._id : getRandomElement(comments)._id
                    };
                    break;
                case 'search':
                    const searchTerms = ['React', 'JavaScript', 'Python', 'th·ª±c t·∫≠p', 'vi·ªác l√†m', 'h·ªçc t·∫≠p', 'l·∫≠p tr√¨nh'];
                    details = {
                        searchQuery: getRandomElement(searchTerms),
                        resultsCount: getRandomNumber(0, 50)
                    };
                    break;
                case 'view_topic':
                    details = {
                        targetType: 'topic',
                        targetId: getRandomElement(topics)._id,
                        duration: getRandomNumber(60, 600)
                    };
                    break;
                case 'login':
                    details = {
                        loginMethod: 'email'
                    };
                    break;
            }

            const activity = new UserActivity({
                userId: user._id,
                activityType,
                timestamp,
                details,
                sessionInfo: {
                    ipAddress: `192.168.1.${getRandomNumber(1, 254)}`,
                    userAgent: getRandomElement([
                        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
                        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
                    ]),
                    device: getRandomElement(['desktop', 'mobile', 'tablet']),
                    browser: getRandomElement(['Chrome', 'Firefox', 'Safari', 'Edge']),
                    os: getRandomElement(['Windows', 'macOS', 'Linux', 'iOS', 'Android'])
                }
            });

            await activity.save();
            activities.push(activity);
        }
        console.log(`‚úÖ Created ${activities.length} user activities`);

        // Update post and topic view counts based on activities
        console.log('üîÑ Updating view counts...');
        const viewActivities = activities.filter(a => a.activityType === 'view_post');
        for (const activity of viewActivities) {
            if (activity.details.targetId) {
                await Post.findByIdAndUpdate(activity.details.targetId, { $inc: { views: 1 } });
            }
        }

        const topicViewActivities = activities.filter(a => a.activityType === 'view_topic');
        for (const activity of topicViewActivities) {
            if (activity.details.targetId) {
                await Topic.findByIdAndUpdate(activity.details.targetId, { $inc: { viewCount: 1 } });
            }
        }

        console.log('‚úÖ Updated view counts');

    } catch (error) {
        console.error('‚ùå Error generating data:', error);
    }
}

module.exports = { generateData };

// Run if called directly
if (require.main === module) {
    generateData().then(() => {
        console.log('üéâ Data generation completed!');
        process.exit(0);
    }).catch(error => {
        console.error('‚ùå Error:', error);
        process.exit(1);
    });
}
