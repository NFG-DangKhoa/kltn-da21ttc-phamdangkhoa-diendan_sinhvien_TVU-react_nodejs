import React, { useState } from 'react';
import {
    Container,
    Typography,
    Box,
    Card,
    CardContent,
    Grid,
    TextField,
    Button,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Switch,
    Chip,
    Alert,
    Divider,
    Paper
} from '@mui/material';
import {
    Security,
    VpnKey,
    Smartphone,
    History,
    Warning,
    CheckCircle,
    Shield,
    Lock,
    Visibility,
    VisibilityOff
} from '@mui/icons-material';

const AdminSecurity = () => {
    const [showCurrentPassword, setShowCurrentPassword] = useState(false);
    const [showNewPassword, setShowNewPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [twoFactorEnabled, setTwoFactorEnabled] = useState(true);
    const [emailNotifications, setEmailNotifications] = useState(true);
    const [showSuccess, setShowSuccess] = useState(false);

    const [passwordData, setPasswordData] = useState({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
    });

    const handlePasswordChange = (field, value) => {
        setPasswordData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const handleChangePassword = () => {
        if (passwordData.newPassword !== passwordData.confirmPassword) {
            alert('M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!');
            return;
        }
        
        // Simulate password change
        setShowSuccess(true);
        setPasswordData({
            currentPassword: '',
            newPassword: '',
            confirmPassword: ''
        });
        setTimeout(() => setShowSuccess(false), 3000);
    };

    const loginHistory = [
        { date: '2024-01-15 14:30', ip: '192.168.1.100', device: 'Chrome on Windows', location: 'Tr√† Vinh, Vi·ªát Nam', status: 'success' },
        { date: '2024-01-14 09:15', ip: '192.168.1.100', device: 'Chrome on Windows', location: 'Tr√† Vinh, Vi·ªát Nam', status: 'success' },
        { date: '2024-01-13 16:45', ip: '192.168.1.101', device: 'Firefox on Windows', location: 'Tr√† Vinh, Vi·ªát Nam', status: 'success' },
        { date: '2024-01-12 11:20', ip: '10.0.0.50', device: 'Safari on iPhone', location: 'TP.HCM, Vi·ªát Nam', status: 'failed' },
        { date: '2024-01-11 08:30', ip: '192.168.1.100', device: 'Chrome on Windows', location: 'Tr√† Vinh, Vi·ªát Nam', status: 'success' }
    ];

    return (
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Typography variant="h4" gutterBottom>
                üîí B·∫£o M·∫≠t T√†i Kho·∫£n
            </Typography>

            {showSuccess && (
                <Alert severity="success" sx={{ mb: 3 }}>
                    C·∫≠p nh·∫≠t b·∫£o m·∫≠t th√†nh c√¥ng!
                </Alert>
            )}

            <Grid container spacing={3}>
                {/* Password Change */}
                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                üîë ƒê·ªïi M·∫≠t Kh·∫©u
                            </Typography>

                            <Box sx={{ mt: 2 }}>
                                <TextField
                                    fullWidth
                                    label="M·∫≠t kh·∫©u hi·ªán t·∫°i"
                                    type={showCurrentPassword ? 'text' : 'password'}
                                    value={passwordData.currentPassword}
                                    onChange={(e) => handlePasswordChange('currentPassword', e.target.value)}
                                    sx={{ mb: 2 }}
                                    InputProps={{
                                        endAdornment: (
                                            <Button
                                                onClick={() => setShowCurrentPassword(!showCurrentPassword)}
                                                sx={{ minWidth: 'auto', p: 1 }}
                                            >
                                                {showCurrentPassword ? <VisibilityOff /> : <Visibility />}
                                            </Button>
                                        )
                                    }}
                                />

                                <TextField
                                    fullWidth
                                    label="M·∫≠t kh·∫©u m·ªõi"
                                    type={showNewPassword ? 'text' : 'password'}
                                    value={passwordData.newPassword}
                                    onChange={(e) => handlePasswordChange('newPassword', e.target.value)}
                                    sx={{ mb: 2 }}
                                    InputProps={{
                                        endAdornment: (
                                            <Button
                                                onClick={() => setShowNewPassword(!showNewPassword)}
                                                sx={{ minWidth: 'auto', p: 1 }}
                                            >
                                                {showNewPassword ? <VisibilityOff /> : <Visibility />}
                                            </Button>
                                        )
                                    }}
                                />

                                <TextField
                                    fullWidth
                                    label="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
                                    type={showConfirmPassword ? 'text' : 'password'}
                                    value={passwordData.confirmPassword}
                                    onChange={(e) => handlePasswordChange('confirmPassword', e.target.value)}
                                    sx={{ mb: 3 }}
                                    InputProps={{
                                        endAdornment: (
                                            <Button
                                                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                                                sx={{ minWidth: 'auto', p: 1 }}
                                            >
                                                {showConfirmPassword ? <VisibilityOff /> : <Visibility />}
                                            </Button>
                                        )
                                    }}
                                />

                                <Button
                                    variant="contained"
                                    startIcon={<VpnKey />}
                                    onClick={handleChangePassword}
                                    disabled={!passwordData.currentPassword || !passwordData.newPassword || !passwordData.confirmPassword}
                                >
                                    ƒê·ªïi M·∫≠t Kh·∫©u
                                </Button>
                            </Box>
                        </CardContent>
                    </Card>
                </Grid>

                {/* Security Settings */}
                <Grid item xs={12} md={6}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                üõ°Ô∏è C√†i ƒê·∫∑t B·∫£o M·∫≠t
                            </Typography>

                            <List>
                                <ListItem>
                                    <ListItemIcon>
                                        <Smartphone color="primary" />
                                    </ListItemIcon>
                                    <ListItemText
                                        primary="X√°c th·ª±c hai y·∫øu t·ªë (2FA)"
                                        secondary="B·∫£o v·ªá t√†i kho·∫£n v·ªõi m√£ OTP"
                                    />
                                    <Switch
                                        checked={twoFactorEnabled}
                                        onChange={(e) => setTwoFactorEnabled(e.target.checked)}
                                        color="primary"
                                    />
                                </ListItem>

                                <Divider />

                                <ListItem>
                                    <ListItemIcon>
                                        <Security color="success" />
                                    </ListItemIcon>
                                    <ListItemText
                                        primary="Th√¥ng b√°o email b·∫£o m·∫≠t"
                                        secondary="Nh·∫≠n c·∫£nh b√°o khi c√≥ ho·∫°t ƒë·ªông ƒë√°ng ng·ªù"
                                    />
                                    <Switch
                                        checked={emailNotifications}
                                        onChange={(e) => setEmailNotifications(e.target.checked)}
                                        color="primary"
                                    />
                                </ListItem>

                                <Divider />

                                <ListItem>
                                    <ListItemIcon>
                                        <Shield color="warning" />
                                    </ListItemIcon>
                                    <ListItemText
                                        primary="Phi√™n ƒëƒÉng nh·∫≠p"
                                        secondary="Qu·∫£n l√Ω c√°c phi√™n ƒëƒÉng nh·∫≠p ho·∫°t ƒë·ªông"
                                    />
                                    <Button variant="outlined" size="small">
                                        Qu·∫£n l√Ω
                                    </Button>
                                </ListItem>
                            </List>
                        </CardContent>
                    </Card>
                </Grid>

                {/* Security Status */}
                <Grid item xs={12}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                üìä Tr·∫°ng Th√°i B·∫£o M·∫≠t
                            </Typography>

                            <Grid container spacing={2} sx={{ mt: 1 }}>
                                <Grid item xs={12} sm={6} md={3}>
                                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                                        <CheckCircle color="success" sx={{ fontSize: 40, mb: 1 }} />
                                        <Typography variant="h6">M·∫°nh</Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            M·∫≠t kh·∫©u
                                        </Typography>
                                    </Paper>
                                </Grid>

                                <Grid item xs={12} sm={6} md={3}>
                                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                                        <CheckCircle color="success" sx={{ fontSize: 40, mb: 1 }} />
                                        <Typography variant="h6">ƒê√£ b·∫≠t</Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            2FA
                                        </Typography>
                                    </Paper>
                                </Grid>

                                <Grid item xs={12} sm={6} md={3}>
                                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                                        <CheckCircle color="success" sx={{ fontSize: 40, mb: 1 }} />
                                        <Typography variant="h6">An to√†n</Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            Phi√™n ƒëƒÉng nh·∫≠p
                                        </Typography>
                                    </Paper>
                                </Grid>

                                <Grid item xs={12} sm={6} md={3}>
                                    <Paper sx={{ p: 2, textAlign: 'center' }}>
                                        <Warning color="warning" sx={{ fontSize: 40, mb: 1 }} />
                                        <Typography variant="h6">C·∫£nh b√°o</Typography>
                                        <Typography variant="body2" color="text.secondary">
                                            ƒêƒÉng nh·∫≠p l·∫°
                                        </Typography>
                                    </Paper>
                                </Grid>
                            </Grid>
                        </CardContent>
                    </Card>
                </Grid>

                {/* Login History */}
                <Grid item xs={12}>
                    <Card>
                        <CardContent>
                            <Typography variant="h6" gutterBottom>
                                üìù L·ªãch S·ª≠ ƒêƒÉng Nh·∫≠p
                            </Typography>

                            <List>
                                {loginHistory.map((login, index) => (
                                    <React.Fragment key={index}>
                                        <ListItem>
                                            <ListItemIcon>
                                                <History color={login.status === 'success' ? 'success' : 'error'} />
                                            </ListItemIcon>
                                            <ListItemText
                                                primary={
                                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                                        <Typography variant="body1">
                                                            {login.device}
                                                        </Typography>
                                                        <Chip
                                                            label={login.status === 'success' ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i'}
                                                            color={login.status === 'success' ? 'success' : 'error'}
                                                            size="small"
                                                        />
                                                    </Box>
                                                }
                                                secondary={
                                                    <Box>
                                                        <Typography variant="body2" color="text.secondary">
                                                            {login.date} ‚Ä¢ {login.ip} ‚Ä¢ {login.location}
                                                        </Typography>
                                                    </Box>
                                                }
                                            />
                                        </ListItem>
                                        {index < loginHistory.length - 1 && <Divider />}
                                    </React.Fragment>
                                ))}
                            </List>
                        </CardContent>
                    </Card>
                </Grid>
            </Grid>
        </Container>
    );
};

export default AdminSecurity;
