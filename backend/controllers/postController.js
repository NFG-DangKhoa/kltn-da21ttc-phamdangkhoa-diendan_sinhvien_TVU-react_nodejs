const Post = require('../models/Post');
const Comment = require('../models/Comment');
const CommentLike = require('../models/CommentLike');
const Rating = require('../models/Rating');
const Like = require('../models/Like');
const Image = require('../models/Image');
const fs = require('fs'); // ƒê·ªÉ t∆∞∆°ng t√°c v·ªõi h·ªá th·ªëng t·ªáp
const path = require('path'); // ƒê·ªÉ x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n t·ªáp
const { getPostThumbnail } = require('../utils/imageExtractor');

// Th√™m bi·∫øn io ƒë·ªÉ s·ª≠ d·ª•ng Socket.IO
let io;

// H√†m ƒë·ªÉ thi·∫øt l·∫≠p Socket.IO (g·ªçi m·ªôt l·∫ßn khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông)
exports.setIo = (socketIoInstance) => {
    io = socketIoInstance;
};

// L·∫•y danh s√°ch b√†i vi·∫øt
exports.getPosts = async (req, res) => {
    try {
        const authorId = req.query.authorId;
        let query = {};

        if (authorId) {
            query.author = authorId;
        }

        const posts = await Post.find(query)
            .populate('author', 'username fullName avatarUrl')
            .sort({ createdAt: -1 });

        res.status(200).json(posts);
    } catch (error) {
        console.error("L·ªói khi l·∫•y b√†i vi·∫øt:", error);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y b√†i vi·∫øt" });
    }
};

// L·∫•y b√†i vi·∫øt g·∫ßn ƒë√¢y
exports.getRecentPosts = async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 6;

        const posts = await Post.find()
            .populate('authorId', 'fullName')
            .populate('topicId', 'name')
            .sort({ createdAt: -1 })
            .limit(limit)
            .lean();

        // Mock data n·∫øu kh√¥ng c√≥ posts trong database
        if (!posts || posts.length === 0) {
            const mockPosts = [
                {
                    _id: '1',
                    title: 'H∆∞·ªõng d·∫´n h·ªçc React cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
                    content: 'React l√† m·ªôt th∆∞ vi·ªán JavaScript ph·ªï bi·∫øn...',
                    authorId: { fullName: 'Nguy·ªÖn VƒÉn A' },
                    topicId: { name: 'L·∫≠p tr√¨nh' },
                    createdAt: new Date(),
                    likeCount: 15,
                    commentCount: 8
                },
                {
                    _id: '2',
                    title: 'Tips h·ªçc t·∫≠p hi·ªáu qu·∫£ cho sinh vi√™n',
                    content: 'Nh·ªØng ph∆∞∆°ng ph√°p h·ªçc t·∫≠p ƒë∆∞·ª£c ch·ª©ng minh...',
                    authorId: { fullName: 'Tr·∫ßn Th·ªã B' },
                    topicId: { name: 'H·ªçc t·∫≠p' },
                    createdAt: new Date(),
                    likeCount: 23,
                    commentCount: 12
                }
            ];
            return res.status(200).json(mockPosts);
        }

        // Add thumbnail image to each post
        const postsWithThumbnails = posts.map(post => ({
            ...post,
            thumbnailImage: getPostThumbnail(post),
            excerpt: post.content ? post.content.replace(/<[^>]*>/g, '').substring(0, 150) + '...' : ''
        }));

        res.status(200).json(postsWithThumbnails);
    } catch (error) {
        console.error("L·ªói khi l·∫•y b√†i vi·∫øt g·∫ßn ƒë√¢y:", error);
        res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y b√†i vi·∫øt g·∫ßn ƒë√¢y" });
    }
};

// L·∫•y b√†i vi·∫øt theo topic (deprecated - use getPostsByTopicWithDetails)
// exports.getPostsByTopic = async (req, res) => {
//     try {
//         const topicId = req.params.topicId;
//         const posts = await Post.find({ topic: topicId })
//             .populate('author', 'username fullName avatarUrl')
//             .sort({ createdAt: -1 });

//         res.status(200).json(posts);
//     } catch (error) {
//         console.error("L·ªói khi l·∫•y b√†i vi·∫øt theo topic:", error);
//         res.status(500).json({ message: "Kh√¥ng th·ªÉ l·∫•y b√†i vi·∫øt t·ª´ topic" });
//     }
// };

// L·∫•y b√†i vi·∫øt theo topic id
exports.getPostsByTopicWithDetails = async (req, res) => {
    try {
        const { topicId } = req.params;

        console.log(`üîç DEBUG: Fetching posts for topicId: ${topicId}`);
        console.log(`üîç DEBUG: topicId type: ${typeof topicId}`);

        // L·∫•y b√†i vi·∫øt v√† populate th√¥ng tin t√°c gi·∫£, ch·ªß ƒë·ªÅ
        // Bao g·ªìm lu√¥n commentCount, likeCount, ratingCount t·ª´ Post model
        const posts = await Post.find({ topicId })
            .populate('authorId', 'fullName')
            .populate('topicId', 'name')
            .select('title content commentCount likeCount ratingCount') // Ch·ªçn r√µ r√†ng c√°c tr∆∞·ªùng mong mu·ªën
            .lean(); // S·ª≠ d·ª•ng .lean() ƒë·ªÉ nh·∫≠n v·ªÅ plain JavaScript objects

        console.log(`üîç DEBUG: Found ${posts.length} posts for topicId ${topicId}`);
        posts.forEach((post, index) => {
            console.log(`  ${index + 1}. ${post.title} (topicId: ${post.topicId?._id})`);
        });

        if (!posts || posts.length === 0) {
            return res.status(200).json([]); // Tr·∫£ v·ªÅ m·∫£ng r·ªóng v√† status 200 n·∫øu kh√¥ng t√¨m th·∫•y b√†i vi·∫øt
        }

        const detailedPosts = await Promise.all(posts.map(async (post) => {
            // L·∫•y b√¨nh lu·∫≠n g·ªëc (c√≥ populate t√°c gi·∫£)
            const comments = await Comment.find({ postId: post._id, parentCommentId: null })
                .populate('authorId', 'fullName')
                .lean();

            // Duy·ªát t·ª´ng comment ƒë·ªÉ l·∫•y replies v√† likeCount
            const detailedComments = await Promise.all(comments.map(async (comment) => {
                const replies = await Comment.find({ parentCommentId: comment._id })
                    .populate('authorId', 'fullName')
                    .lean();

                const detailedReplies = await Promise.all(replies.map(async (reply) => {
                    const replyLikes = await Like.find({ targetId: reply._id, targetType: 'comment' }).lean();
                    return {
                        ...reply,
                        likeCount: replyLikes.length, // V·∫´n t√≠nh likeCount cho t·ª´ng reply
                    };
                }));

                const commentLikes = await Like.find({ targetId: comment._id, targetType: 'comment' }).lean();

                return {
                    ...comment,
                    likeCount: commentLikes.length, // V·∫´n t√≠nh likeCount cho t·ª´ng comment
                    replies: detailedReplies,
                    replyCount: detailedReplies.length, // V·∫´n t√≠nh replyCount cho t·ª´ng comment
                };
            }));

            // L·∫•y h√¨nh ·∫£nh c·ªßa b√†i vi·∫øt
            const images = await Image.find({ postId: post._id }).lean();
            const mainImage = images.find(img => img.isMain) || null;
            const otherImages = images.filter(img => !img.isMain);

            // L·∫•y ƒë√°nh gi√°
            const ratings = await Rating.find({ postId: post._id }).populate('userId', 'fullName').lean();
            const ratedUsers = ratings.map(r => r.userId);

            // L·∫•y l∆∞·ª£t th√≠ch b√†i vi·∫øt
            const likes = await Like.find({ targetId: post._id, targetType: 'post' }).populate('userId', 'fullName').lean();
            const likedUsers = likes.map(like => like.userId);

            // Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng m·ªõi v·ªõi t·∫•t c·∫£ c√°c th√¥ng tin ƒë√£ l·∫•y
            return {
                ...post, // Bao g·ªìm title, content, commentCount, likeCount, ratingCount t·ª´ Post model
                comments: detailedComments,
                ratedUsers,
                ratings, // Tr·∫£ v·ªÅ to√†n b·ªô m·∫£ng ratings n·∫øu b·∫°n mu·ªën chi ti·∫øt
                likes,   // Tr·∫£ v·ªÅ to√†n b·ªô m·∫£ng likes n·∫øu b·∫°n mu·ªën chi ti·∫øt
                likedUsers,
                images,
                mainImage,
                otherImages,
                thumbnailImage: getPostThumbnail(post), // Add thumbnail from content
                excerpt: post.content ? post.content.replace(/<[^>]*>/g, '').substring(0, 150) + '...' : ''
            };
        }));

        res.status(200).json(detailedPosts);

    } catch (err) {
        console.error('L·ªói khi l·∫•y chi ti·∫øt b√†i vi·∫øt theo topic ID:', err);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô.', error: err.message });
    }
};

// H√†m n√†y ch·ªâ c√≥ ch·ª©c nƒÉng l·∫•y d·ªØ li·ªáu v√† kh√¥ng th·ª±c hi·ªán b·∫•t k·ª≥ c·∫≠p nh·∫≠t n√†o v√†o c∆° s·ªü d·ªØ li·ªáu.
exports.getPostByTopicAndPostIdWithDetails = async (req, res) => {
    try {
        const { topicId, postId } = req.params;

        // 1. T√¨m b√†i vi·∫øt v√† populate th√¥ng tin t√°c gi·∫£, topic
        // ƒê√¢y l√† thao t√°c ƒë·ªçc d·ªØ li·ªáu
        const post = await Post.findOne({ _id: postId, topicId })
            .populate('authorId', 'fullName avatar') // Th√™m avatar cho t√°c gi·∫£ b√†i vi·∫øt
            .populate('topicId', 'name');

        if (!post) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt' });
        }

        // 2. L·∫•y T·∫§T C·∫¢ b√¨nh lu·∫≠n li√™n quan ƒë·∫øn b√†i vi·∫øt n√†y (g·ªëc v√† ph·∫£n h·ªìi)
        // M·∫∑c d√π ch√∫ng ta kh√¥ng d√πng `allCommentsForPost.length` cho `post.commentCount` n·ªØa,
        // ch√∫ng ta v·∫´n c·∫ßn l·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt c√°c b√¨nh lu·∫≠n v√† ph·∫£n h·ªìi.
        const allCommentsForPost = await Comment.find({ postId: post._id })
            .populate('authorId', 'fullName avatar') // Populate t√°c gi·∫£ c·ªßa b√¨nh lu·∫≠n
            .populate('parentCommentId', 'authorId content'); // Populate th√¥ng tin c·ªßa b√¨nh lu·∫≠n cha n·∫øu c√≥

        // 3. L·ªçc b√¨nh lu·∫≠n g·ªëc
        const rootComments = allCommentsForPost.filter(comment => comment.parentCommentId === null);

        // 4. Build nested comment tree using the same logic as commentController
        const buildCommentTree = async (comments, allReplies) => {
            // Build nested structure
            const commentMap = new Map();

            // Add root comments to map
            comments.forEach(comment => {
                commentMap.set(comment._id.toString(), {
                    ...comment.toObject(),
                    replies: []
                });
            });

            // Add replies to map
            allReplies.forEach(reply => {
                commentMap.set(reply._id.toString(), {
                    ...reply.toObject(),
                    replies: []
                });
            });

            // Build tree structure
            allReplies.forEach(reply => {
                const parentId = reply.parentCommentId.toString();
                if (commentMap.has(parentId)) {
                    commentMap.get(parentId).replies.push(commentMap.get(reply._id.toString()));
                }
            });

            // Return root comments with nested replies
            return comments.map(comment => commentMap.get(comment._id.toString()));
        };

        // Get all replies for the post (not just direct replies)
        const allReplies = allCommentsForPost.filter(comment => comment.parentCommentId !== null);

        // Build the nested comment tree
        const detailedComments = await buildCommentTree(rootComments, allReplies);

        // Add like information to all comments (using CommentLike model)
        const allCommentIds = [...rootComments.map(c => c._id), ...allReplies.map(r => r._id)];

        // Get like counts for all comments
        const commentLikeCounts = await CommentLike.aggregate([
            { $match: { commentId: { $in: allCommentIds } } },
            { $group: { _id: '$commentId', count: { $sum: 1 } } }
        ]);

        const likeCountMap = new Map();
        commentLikeCounts.forEach(item => {
            likeCountMap.set(item._id.toString(), item.count);
        });

        // Get user's liked comments if user is authenticated
        let userLikedCommentIds = new Set();
        if (req.user && req.user.id) {
            const userLikes = await CommentLike.find({
                commentId: { $in: allCommentIds },
                userId: req.user.id
            }).lean();
            userLikedCommentIds = new Set(userLikes.map(like => like.commentId.toString()));
        }

        // Update like counts and isLiked status in the comment tree
        const updateLikeCounts = (comments) => {
            return comments.map(comment => {
                const updatedComment = {
                    ...comment,
                    likeCount: likeCountMap.get(comment._id.toString()) || 0,
                    isLiked: userLikedCommentIds.has(comment._id.toString())
                };
                if (updatedComment.replies && updatedComment.replies.length > 0) {
                    updatedComment.replies = updateLikeCounts(updatedComment.replies);
                }
                return updatedComment;
            });
        };

        const finalDetailedComments = updateLikeCounts(detailedComments);

        // 5. L·∫•y th√¥ng tin v·ªÅ Rating
        const ratings = await Rating.find({ postId: post._id }).populate('userId', 'fullName avatar');
        const ratedUsers = ratings.map(r => r.userId);
        const ratingCount = ratings.length; // T√≠nh to√°n ratingCount t·ª´ s·ªë l∆∞·ª£ng ratings l·∫•y ƒë∆∞·ª£c

        // 6. L·∫•y th√¥ng tin v·ªÅ Like c·ªßa b√†i vi·∫øt
        const likes = await Like.find({ postId: post._id, targetType: 'post' }).populate('userId', 'fullName avatar');
        const likeCount = likes.length; // T√≠nh to√°n likeCount t·ª´ s·ªë l∆∞·ª£ng likes l·∫•y ƒë∆∞·ª£c
        const likedUsers = likes.map(like => like.userId);

        // 6.1. Ki·ªÉm tra xem user hi·ªán t·∫°i ƒë√£ th√≠ch b√†i vi·∫øt ch∆∞a
        let isLikedByCurrentUser = false;
        if (req.user && req.user.id) {
            isLikedByCurrentUser = likes.some(like => like.userId._id.toString() === req.user.id.toString());
        }

        // 7. L·∫•y th√¥ng tin v·ªÅ Image
        const images = await Image.find({ postId: post._id });
        const mainImage = images.find(img => img.isMain) || null;
        const otherImages = images.filter(img => !img.isMain);

        // 8. ƒê·∫£m b·∫£o KH√îNG c√≥ thao t√°c c·∫≠p nh·∫≠t v√†o DB ·ªü ƒë√¢y.
        // C√°c tr∆∞·ªùng ƒë·∫øm (commentCount, likeCount, ratingCount) ƒë∆∞·ª£c l·∫•y tr·ª±c ti·∫øp t·ª´ ƒë·ªëi t∆∞·ª£ng 'post'
        // ho·∫∑c ƒë∆∞·ª£c t√≠nh to√°n d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ ƒë·ªçc (nh∆∞ likeCount, ratingCount).

        // 9. Chu·∫©n b·ªã ƒë·ªëi t∆∞·ª£ng b√†i vi·∫øt chi ti·∫øt ƒë·ªÉ g·ª≠i v·ªÅ client
        const detailedPost = {
            ...post.toObject(), // S·ª≠ d·ª•ng post.toObject() ƒë·ªÉ l·∫•y ƒë·ªëi t∆∞·ª£ng thu·∫ßn t√∫y
            comments: finalDetailedComments, // C√°c b√¨nh lu·∫≠n g·ªëc k√®m ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v·ªõi like counts
            ratedUsers,
            ratingCount, // S·ª≠ d·ª•ng ratingCount ƒë√£ t√≠nh to√°n
            likeCount, // S·ª≠ d·ª•ng likeCount ƒë√£ t√≠nh to√°n
            likedUsers,
            isLikedByCurrentUser, // Th√™m th√¥ng tin user ƒë√£ th√≠ch hay ch∆∞a
            commentCount: post.commentCount, // L·∫•y commentCount tr·ª±c ti·∫øp t·ª´ post model
            images,
            mainImage,
            otherImages,
            thumbnailImage: getPostThumbnail(post), // Add thumbnail from content
            excerpt: post.content ? post.content.replace(/<[^>]*>/g, '').substring(0, 150) + '...' : ''
        };

        // G·ª≠i d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω v·ªÅ cho frontend
        res.json(detailedPost);
    } catch (err) {
        console.error('L·ªói server khi l·∫•y chi ti·∫øt b√†i vi·∫øt:', err);
        res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói server' });
    }
};

// T·∫°o b√†i vi·∫øt m·ªõi v√† l∆∞u ·∫£nh li√™n k·∫øt
exports.createPost = async (req, res) => {
    try {
        const { authorId, title, content, topicId, tags } = req.body;

        console.log('üîÑ Creating post with image processing...');
        console.log('üìù Original content preview:', content.substring(0, 500));
        console.log('üîç Content includes img tags:', content.includes('<img'));
        console.log('üîç Content includes data:', content.includes('data:'));

        // 1. Process images first (convert data URLs and external URLs to files)
        let finalContent = content;
        const { processImagesForPost } = require('./uploadController');
        const axios = require('axios');

        // Extract and process data URLs in content
        const dataUrlRegex = /data:image\/([a-zA-Z]*);base64,([^"']*)/g;
        const dataUrls = [];
        let match;

        while ((match = dataUrlRegex.exec(content)) !== null) {
            dataUrls.push({
                fullMatch: match[0],
                format: match[1],
                data: match[2],
                type: 'dataUrl'
            });
        }

        // Extract and process external image URLs
        const externalUrlRegex = /<img[^>]+src=["'](https?:\/\/[^"']+\.(?:jpg|jpeg|png|gif|webp|svg|bmp)(?:\?[^"']*)?)[^>]*>/gi;
        const externalUrls = [];
        let externalMatch;

        while ((externalMatch = externalUrlRegex.exec(content)) !== null) {
            externalUrls.push({
                fullMatch: externalMatch[0],
                url: externalMatch[1],
                type: 'external'
            });
        }

        console.log(`üì∏ Found ${dataUrls.length} data URLs and ${externalUrls.length} external URLs to process`);

        // Process each data URL and save to public/upload
        for (let i = 0; i < dataUrls.length; i++) {
            const { fullMatch, format, data } = dataUrls[i];

            try {
                const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
                const filename = `${uniqueSuffix}.${format}`;
                const filepath = path.join(__dirname, '../public/upload', filename);

                // Convert base64 to buffer and save
                const buffer = Buffer.from(data, 'base64');
                fs.writeFileSync(filepath, buffer);

                // Create new URL with full server path
                const newUrl = `http://localhost:5000/upload/${filename}`;

                // Replace data URL with file URL in content
                finalContent = finalContent.replace(fullMatch, newUrl);

                console.log(`‚úÖ Processed data URL ${i + 1}: ${filename} (${buffer.length} bytes)`);

            } catch (imageError) {
                console.error(`‚ùå Error processing data URL ${i + 1}:`, imageError);
            }
        }

        // Process each external URL and download to public/upload
        for (let i = 0; i < externalUrls.length; i++) {
            const { fullMatch, url } = externalUrls[i];

            try {
                console.log(`üåê Downloading external image ${i + 1}: ${url}`);

                // Download image from external URL
                const response = await axios.get(url, {
                    responseType: 'arraybuffer',
                    timeout: 10000, // 10 second timeout
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                    }
                });

                // Determine file extension from URL or content-type
                const urlParts = url.split('.');
                let extension = urlParts[urlParts.length - 1].split('?')[0]; // Remove query params
                if (!['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp'].includes(extension.toLowerCase())) {
                    const contentType = response.headers['content-type'];
                    extension = contentType ? contentType.split('/')[1] : 'jpg';
                }

                const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
                const filename = `external-${uniqueSuffix}.${extension}`;
                const filepath = path.join(__dirname, '../public/upload', filename);

                // Save downloaded image
                fs.writeFileSync(filepath, response.data);

                // Create new URL with full server path
                const newUrl = `http://localhost:5000/upload/${filename}`;

                // Replace external URL with local file URL in content
                finalContent = finalContent.replace(url, newUrl);

                console.log(`‚úÖ Downloaded external image ${i + 1}: ${filename} (${response.data.length} bytes)`);

            } catch (imageError) {
                console.error(`‚ùå Error downloading external image ${i + 1} from ${url}:`, imageError.message);
                // Keep original URL if download fails
                console.log(`‚ö†Ô∏è Keeping original external URL: ${url}`);
            }
        }

        // 2. T·∫°o b√†i vi·∫øt v·ªõi content ƒë√£ ƒë∆∞·ª£c process
        const newPost = new Post({
            authorId,
            title,
            content: finalContent,
            topicId,
            tags,
        });

        const savedPost = await newPost.save();

        // 3. T√¨m t·∫•t c·∫£ URL ·∫£nh trong n·ªôi dung (sau khi process)
        const imageUrls = extractImageUrls(finalContent);

        // 4. L∆∞u ·∫£nh g·∫Øn v·ªõi post
        const imageDocs = await Promise.all(
            imageUrls.map(url => {
                return Image.create({
                    refType: 'post',
                    refId: savedPost._id,
                    url,
                });
            })
        );

        console.log(`‚úÖ Post created with ${imageDocs.length} images saved to public/upload`);

        // Populate post v·ªõi th√¥ng tin author v√† topic
        await savedPost.populate([
            { path: 'authorId', select: 'fullName username' },
            { path: 'topicId', select: 'name' }
        ]);

        // G·ª≠i notification cho admin
        if (global.notificationService) {
            await global.notificationService.notifyPostCreated(
                savedPost._id,
                authorId,
                savedPost.title,
                savedPost.topicId.name
            );
        }

        // Ph√°t s·ª± ki·ªán Socket.IO khi c√≥ b√†i vi·∫øt m·ªõi
        if (io) {
            io.emit('newPost', savedPost);
        }

        res.status(201).json({
            message: 'T·∫°o b√†i vi·∫øt th√†nh c√¥ng',
            post: savedPost,
            images: imageDocs,
            processedImages: dataUrls.length
        });
    } catch (error) {
        console.error('L·ªói t·∫°o b√†i vi·∫øt:', error);
        res.status(500).json({ message: 'L·ªói server khi t·∫°o b√†i vi·∫øt' });
    }
};

// **Th√™m h√†m createPostWithImages ·ªü ƒë√¢y**
exports.createPostWithImages = async (req, res) => {
    // This function can be the same as createPost if it handles images within the 'content' field.
    // If it's intended for a different image upload mechanism (e.g., direct file upload),
    // you'll need to adjust the logic. For now, assuming it's similar to createPost.
    try {
        const { authorId, title, content, topicId, tags } = req.body;

        const newPost = new Post({
            authorId,
            title,
            content,
            topicId,
            tags,
        });

        const savedPost = await newPost.save();

        const imageUrls = extractImageUrls(content);

        const imageDocs = await Promise.all(
            imageUrls.map(url => {
                return Image.create({
                    refType: 'post',
                    refId: savedPost._id,
                    url,
                });
            })
        );

        if (io) {
            io.emit('newPost', savedPost);
        }

        res.status(201).json({
            message: 'T·∫°o b√†i vi·∫øt v·ªõi ·∫£nh th√†nh c√¥ng',
            post: savedPost,
            images: imageDocs,
        });
    } catch (error) {
        console.error('L·ªói t·∫°o b√†i vi·∫øt v·ªõi ·∫£nh:', error);
        res.status(500).json({ message: 'L·ªói server khi t·∫°o b√†i vi·∫øt v·ªõi ·∫£nh' });
    }
};


// L·∫•y t·∫•t c·∫£ b√†i vi·∫øt theo topicId
exports.getPostsByTopic = async (req, res) => {
    try {
        const posts = await Post.find({ topicId: req.params.topicId }).populate('authorId', 'fullName'); // Use fullName for author name
        res.json(posts);
    } catch (err) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y b√†i vi·∫øt', error: err.message });
    }
};

// L·∫•y chi ti·∫øt b√†i vi·∫øt theo id
exports.getPostById = async (req, res) => {
    try {
        const post = await Post.findById(req.params.id).populate('authorId', 'fullName'); // Use fullName for author name
        if (!post) return res.status(404).json({ message: 'B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i' });
        res.json(post);
    } catch (err) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y b√†i vi·∫øt', error: err.message });
    }
};

// C·∫≠p nh·∫≠t b√†i vi·∫øt v√† qu·∫£n l√Ω ·∫£nh li√™n k·∫øt
exports.updatePost = async (req, res) => {
    try {
        const postId = req.params.id; // Changed from req.params.postId for consistency with other functions
        const userId = req.user.id; // Assuming req.user.id is available from authentication middleware

        // 1. T√¨m b√†i vi·∫øt c·∫ßn c·∫≠p nh·∫≠t
        const post = await Post.findById(postId);
        if (!post) {
            return res.status(404).json({ message: 'B√†i vi·∫øt kh√¥ng t√¨m th·∫•y' });
        }
        if (post.authorId.toString() !== userId) {
            return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†i vi·∫øt n√†y' });
        }

        const oldContent = post.content || ''; // L∆∞u n·ªôi dung c≈© ƒë·ªÉ qu·∫£n l√Ω ·∫£nh
        let { title, content, topicId, tags } = req.body;

        console.log('üîÑ Updating post with image processing...');

        // 2. Process new images in content (convert data URLs and external URLs to files)
        let finalContent = content;
        if (content !== undefined) {
            const dataUrlRegex = /data:image\/([a-zA-Z]*);base64,([^"']*)/g;
            const dataUrls = [];
            let match;

            while ((match = dataUrlRegex.exec(content)) !== null) {
                dataUrls.push({
                    fullMatch: match[0],
                    format: match[1],
                    data: match[2],
                    type: 'dataUrl'
                });
            }

            // Extract and process external image URLs
            const externalUrlRegex = /<img[^>]+src=["'](https?:\/\/[^"']+\.(?:jpg|jpeg|png|gif|webp|svg|bmp)(?:\?[^"']*)?)[^>]*>/gi;
            const externalUrls = [];
            let externalMatch;

            while ((externalMatch = externalUrlRegex.exec(content)) !== null) {
                externalUrls.push({
                    fullMatch: externalMatch[0],
                    url: externalMatch[1],
                    type: 'external'
                });
            }

            console.log(`üì∏ Found ${dataUrls.length} data URLs and ${externalUrls.length} external URLs to process`);

            // Process each data URL and save to public/upload
            for (let i = 0; i < dataUrls.length; i++) {
                const { fullMatch, format, data } = dataUrls[i];

                try {
                    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
                    const filename = `${uniqueSuffix}.${format}`;
                    const filepath = path.join(__dirname, '../public/upload', filename);

                    // Convert base64 to buffer and save
                    const buffer = Buffer.from(data, 'base64');
                    fs.writeFileSync(filepath, buffer);

                    // Create new URL with full server path
                    const newUrl = `http://localhost:5000/upload/${filename}`;

                    // Replace data URL with file URL in content
                    finalContent = finalContent.replace(fullMatch, newUrl);

                    console.log(`‚úÖ Processed new data URL ${i + 1}: ${filename} (${buffer.length} bytes)`);

                } catch (imageError) {
                    console.error(`‚ùå Error processing new data URL ${i + 1}:`, imageError);
                }
            }

            // Process each external URL and download to public/upload
            for (let i = 0; i < externalUrls.length; i++) {
                const { fullMatch, url } = externalUrls[i];

                try {
                    console.log(`üåê Downloading external image ${i + 1}: ${url}`);

                    // Download image from external URL
                    const response = await axios.get(url, {
                        responseType: 'arraybuffer',
                        timeout: 10000, // 10 second timeout
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                        }
                    });

                    // Determine file extension from URL or content-type
                    const urlParts = url.split('.');
                    let extension = urlParts[urlParts.length - 1].split('?')[0]; // Remove query params
                    if (!['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg', 'bmp'].includes(extension.toLowerCase())) {
                        const contentType = response.headers['content-type'];
                        extension = contentType ? contentType.split('/')[1] : 'jpg';
                    }

                    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
                    const filename = `external-${uniqueSuffix}.${extension}`;
                    const filepath = path.join(__dirname, '../public/upload', filename);

                    // Save downloaded image
                    fs.writeFileSync(filepath, response.data);

                    // Create new URL with full server path
                    const newUrl = `http://localhost:5000/upload/${filename}`;

                    // Replace external URL with local file URL in content
                    finalContent = finalContent.replace(url, newUrl);

                    console.log(`‚úÖ Downloaded external image ${i + 1}: ${filename} (${response.data.length} bytes)`);

                } catch (imageError) {
                    console.error(`‚ùå Error downloading external image ${i + 1} from ${url}:`, imageError.message);
                    // Keep original URL if download fails
                    console.log(`‚ö†Ô∏è Keeping original external URL: ${url}`);
                }
            }
        }

        // 3. C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c·ªßa b√†i vi·∫øt
        if (title !== undefined) post.title = title;
        if (content !== undefined) post.content = finalContent;
        if (topicId !== undefined) post.topicId = topicId;
        if (tags !== undefined) post.tags = tags;

        post.updatedAt = Date.now(); // C·∫≠p nh·∫≠t th·ªùi gian ch·ªânh s·ª≠a
        const savedPost = await post.save(); // L∆∞u c√°c thay ƒë·ªïi v√†o DB

        // --- Logic qu·∫£n l√Ω ·∫£nh v·∫≠t l√Ω v√† trong DB sau khi c·∫≠p nh·∫≠t b√†i vi·∫øt ---

        // Tr√≠ch xu·∫•t URL ·∫£nh c≈© v√† m·ªõi t·ª´ n·ªôi dung
        const oldImageUrls = extractImageUrls(oldContent);
        const newImageUrls = extractImageUrls(savedPost.content);

        // 1. X√°c ƒë·ªãnh c√°c URL ·∫£nh ƒë√£ b·ªã x√≥a kh·ªèi n·ªôi dung b√†i vi·∫øt
        const removedImageUrls = oldImageUrls.filter(url => !newImageUrls.includes(url));

        // 2. X√≥a c√°c t·ªáp ·∫£nh v·∫≠t l√Ω ƒë√£ b·ªã x√≥a kh·ªèi th∆∞ m·ª•c public/upload
        await Promise.all(removedImageUrls.map(async url => {
            const filename = extractFilenameFromUrl(url);
            // Ch·ªâ x√≥a n·∫øu l√† ·∫£nh c·ª•c b·ªô
            if (filename && isLocalImageUrl(url)) {
                await deletePhysicalImage(filename);
            }
        }));

        // 3. C·∫≠p nh·∫≠t c√°c b·∫£n ghi ·∫£nh trong c∆° s·ªü d·ªØ li·ªáu (x√≥a c√°c b·∫£n ghi c≈©, th√™m c√°c b·∫£n ghi m·ªõi)
        await Image.deleteMany({ refType: 'post', refId: savedPost._id }); // X√≥a t·∫•t c·∫£ ·∫£nh li√™n k·∫øt c≈©

        const imageDocs = await Promise.all(
            newImageUrls.map(async url => {
                // T·∫°o b·∫£n ghi m·ªõi cho t·ª´ng ·∫£nh trong n·ªôi dung c·∫≠p nh·∫≠t
                return Image.create({
                    refType: 'post',
                    refId: savedPost._id,
                    url,
                });
            })
        );

        // --- Populate th√¥ng tin t√°c gi·∫£ tr∆∞·ªõc khi g·ª≠i ph·∫£n h·ªìi v√† emit Socket.IO ---
        // T√¨m l·∫°i b√†i vi·∫øt v√† populate th√¥ng tin t√°c gi·∫£
        const populatedPost = await Post.findById(savedPost._id)
            .populate('authorId', 'fullName avatar'); // Th√™m c√°c tr∆∞·ªùng c·ªßa t√°c gi·∫£ b·∫°n mu·ªën hi·ªÉn th·ªã

        // Ph√°t s·ª± ki·ªán Socket.IO khi c√≥ b√†i vi·∫øt ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        // G·ª≠i ƒë·ªëi t∆∞·ª£ng b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c populate ƒë·ªÉ client nh·∫≠n ƒë·ªß th√¥ng tin
        if (io) {
            io.emit('updatedPost', populatedPost);
        }

        // G·ª≠i ph·∫£n h·ªìi th√†nh c√¥ng v·ªÅ client
        // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng b√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c populate
        res.json({
            message: 'B√†i vi·∫øt v√† ·∫£nh li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
            post: populatedPost, // G·ª≠i b√†i vi·∫øt ƒë√£ c√≥ th√¥ng tin t√°c gi·∫£ ƒë·∫ßy ƒë·ªß
            images: imageDocs,
        });
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt:', error);
        res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t b√†i vi·∫øt', error: error.message });
    }
};

// X√≥a b√†i vi·∫øt
exports.deletePost = async (req, res) => {
    try {
        const postId = req.params.id; // Changed from req.params.postId for consistency with other functions
        const userId = req.user.id; // Assuming req.user.id is available from authentication middleware

        const post = await Post.findById(postId);
        if (!post) {
            console.warn(`B√†i vi·∫øt ${postId} kh√¥ng t√¨m th·∫•y.`);
            return res.status(404).json({ message: 'B√†i vi·∫øt kh√¥ng t√¨m th·∫•y' });
        }
        if (post.authorId.toString() !== userId) {
            console.warn(`Ng∆∞·ªùi d√πng ${userId} kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt ${postId}`);
            return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y' });
        }

        // 1. Tr√≠ch xu·∫•t URL ·∫£nh t·ª´ n·ªôi dung b√†i vi·∫øt tr∆∞·ªõc khi x√≥a b√†i vi·∫øt kh·ªèi DB
        const imageUrlsToDeletePhysical = extractImageUrls(post.content || '');
        console.log(`üîç Found ${imageUrlsToDeletePhysical.length} images to delete:`, imageUrlsToDeletePhysical);

        // 2. X√≥a b√†i vi·∫øt kh·ªèi c∆° s·ªü d·ªØ li·ªáu
        const deletePostResult = await Post.deleteOne({ _id: postId });
        console.log(`‚úÖ K·∫øt qu·∫£ x√≥a b√†i vi·∫øt t·ª´ DB:`, deletePostResult);

        // 3. X√≥a t·∫•t c·∫£ c√°c b·∫£n ghi ·∫£nh li√™n k·∫øt v·ªõi b√†i vi·∫øt n√†y kh·ªèi DB
        const deleteImageResult = await Image.deleteMany({ refType: 'post', refId: postId });
        console.log(`‚úÖ K·∫øt qu·∫£ x√≥a ·∫£nh li√™n k·∫øt t·ª´ DB:`, deleteImageResult);

        // 4. X√≥a c√°c t·ªáp ·∫£nh v·∫≠t l√Ω t·ª´ th∆∞ m·ª•c public/upload
        console.log(`üóëÔ∏è Starting to delete physical image files...`);
        await Promise.all(imageUrlsToDeletePhysical.map(async url => {
            const filename = extractFilenameFromUrl(url);
            console.log(`üîç Processing image URL: ${url} ‚Üí filename: ${filename}`);
            console.log(`üîç Is local image: ${isLocalImageUrl(url)}`);
            if (filename && isLocalImageUrl(url)) { // Only delete if it's a local image URL
                console.log(`üóëÔ∏è Deleting physical file: ${filename}`);
                await deletePhysicalImage(filename);
            } else {
                console.log(`‚è≠Ô∏è Skipping non-local image: ${url}`);
            }
        }));
        console.log(`‚úÖ Finished deleting physical image files`);


        // Ph√°t s·ª± ki·ªán Socket.IO khi c√≥ b√†i vi·∫øt b·ªã x√≥a
        if (io) {
            io.emit('deletedPost', { postId: postId });
        }

        res.json({ message: 'B√†i vi·∫øt v√† c√°c ·∫£nh li√™n k·∫øt ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng' });
        console.log(`B√†i vi·∫øt ${postId} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.`);
    } catch (error) {
        console.error('L·ªói khi x√≥a b√†i vi·∫øt (backend):', error);
        res.status(500).json({ message: 'L·ªói server khi x√≥a b√†i vi·∫øt', error: error.message });
    }
};

// TƒÉng l∆∞·ª£t xem
exports.incrementViews = async (req, res) => {
    try {
        const post = await Post.findByIdAndUpdate(
            req.params.id,
            { $inc: { views: 1 } },
            { new: true }
        );
        // No Socket.IO emit here as views might update too frequently.
        // Consider emitting only if there's a significant change or less frequently.
        res.json(post);
    } catch (err) {
        res.status(500).json({ message: 'L·ªói khi tƒÉng l∆∞·ª£t xem', error: err.message });
    }
};


// --- H√ÄM TR·ª¢ GI√öP ---

/**
 * H√†m helper ƒë·ªÉ tr√≠ch xu·∫•t t·∫•t c·∫£ src c·ªßa th·∫ª <img> trong HTML
 */
const extractImageUrls = (htmlContent) => {
    const imageUrls = [];
    // Regex n√†y s·∫Ω t√¨m c√°c th·∫ª <img> v√† tr√≠ch xu·∫•t gi√° tr·ªã c·ªßa thu·ªôc t√≠nh src
    const imgTagRegex = /<img[^>]+src\s*=\s*['"]([^'"]+)['"]/gi;
    let match;

    while ((match = imgTagRegex.exec(htmlContent))) {
        const src = match[1].trim(); // lo·∫°i b·ªè kho·∫£ng tr·∫Øng n·∫øu c√≥
        imageUrls.push(src);
    }

    return imageUrls;
};

// H√†m n√†y s·∫Ω tr√≠ch xu·∫•t t√™n file ·∫£nh t·ª´ c√°c URL ·∫£nh
// V√≠ d·ª•: "http://localhost:5000/upload/1678901234567-abc.png" => "1678901234567-abc.png"
// Ho·∫∑c: "/upload/1678901234567-abc.png" => "1678901234567-abc.png"
function extractFilenameFromUrl(url) {
    try {
        // Handle relative URLs (starting with /)
        if (url.startsWith('/')) {
            return path.basename(url);
        }

        // Handle absolute URLs
        const urlObj = new URL(url);
        return path.basename(urlObj.pathname);
    } catch (e) {
        console.error("URL ·∫£nh kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng th·ªÉ tr√≠ch xu·∫•t t√™n file:", url, e);
        return null;
    }
}

// Th√™m h√†m n√†y v√†o ph·∫ßn "H√ÄM TR·ª¢ GI√öP" c·ªßa b·∫°n
function isLocalImageUrl(url) {
    try {
        // Check if it's a relative URL starting with /upload/
        if (url.startsWith('/upload/')) {
            return true;
        }

        const urlObj = new URL(url);
        // Check for localhost and upload path
        const localDomains = ['localhost:5000', 'localhost:3000', '127.0.0.1:5000', '127.0.0.1:3000'];
        if (localDomains.includes(urlObj.host)) {
            return urlObj.pathname.startsWith('/upload/');
        }

        return false; // Kh√¥ng ph·∫£i ·∫£nh local
    } catch (e) {
        // If URL parsing fails, check if it's a relative path
        return url.startsWith('/upload/');
    }
}

// H√†m ƒë·ªÉ x√≥a c√°c t·ªáp ·∫£nh v·∫≠t l√Ω kh·ªèi th∆∞ m·ª•c public/upload
function deletePhysicalImage(filename) {
    return new Promise((resolve, reject) => {
        // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c l∆∞u tr·ªØ ·∫£nh l√† ch√≠nh x√°c
        const filePath = path.join(__dirname, '../public/upload', filename);
        console.log(`üóëÔ∏è Attempting to delete file: ${filePath}`);

        fs.unlink(filePath, (err) => {
            if (err) {
                // X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn nh∆∞ t·ªáp kh√¥ng t·ªìn t·∫°i (ENOENT)
                if (err.code === 'ENOENT') {
                    console.warn(`‚ö†Ô∏è File ·∫£nh v·∫≠t l√Ω kh√¥ng t·ªìn t·∫°i: ${filePath}. C√≥ th·ªÉ ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥.`);
                    resolve(); // Resolve anyway since file doesn't exist
                } else {
                    console.error(`‚ùå L·ªói khi x√≥a file ·∫£nh v·∫≠t l√Ω ${filePath}:`, err);
                    reject(err);
                }
            } else {
                console.log(`‚úÖ ƒê√£ x√≥a file ·∫£nh v·∫≠t l√Ω: ${filePath}`);
                resolve();
            }
        });
    });
}